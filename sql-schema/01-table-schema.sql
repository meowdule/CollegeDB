-- 데이터베이스 생성
-- CREATE DATABASE college;
USE college;

-- 기존 테이블 삭제
DROP TABLE IF EXISTS GRADE;
DROP TABLE IF EXISTS ATTENDANCE;
DROP TABLE IF EXISTS EXAM;
DROP TABLE IF EXISTS ENROLLMENT;
DROP TABLE IF EXISTS COURSE;
DROP TABLE IF EXISTS PROFESSOR;
DROP TABLE IF EXISTS STUDENT;
DROP TABLE IF EXISTS SCHOLARSHIP;
DROP TABLE IF EXISTS DEPARTMENT;

-- 학과 (Department)
-- 학과 ID, 학과 이름 포함
CREATE TABLE DEPARTMENT (
    DEPT_ID CHAR(3) PRIMARY KEY COMMENT '학과 ID (Primary Key)',
    DEPT_NAME VARCHAR(50) NOT NULL COMMENT '학과 이름'
) COMMENT '대학교 학과 정보';

-- 장학금 (Scholarship)
-- 장학금 ID, 장학금 명칭, 장학금 금액 포함
CREATE TABLE SCHOLARSHIP (
    SCHOLARSHIP_ID INT AUTO_INCREMENT PRIMARY KEY COMMENT '장학금 ID (Primary Key)',
    SCHOLARSHIP_NAME VARCHAR(50) NOT NULL COMMENT '장학금 명칭',
    AMOUNT DECIMAL(10,0) NOT NULL COMMENT '장학금 금액',
    CONSTRAINT chk_amount CHECK (AMOUNT > 0)
) COMMENT '장학금 정보';

-- 학생 (Student)
-- 학번, 이름, 생년월일, 학과 ID, 이메일, 전화번호, 장학금ID 포함
CREATE TABLE STUDENT (
    STUDENT_ID CHAR(8) PRIMARY KEY COMMENT '학생 학번 (Primary Key)',
    STUDENT_NAME VARCHAR(50) NOT NULL COMMENT '학생 이름',
    BIRTHDATE DATE COMMENT '생년월일',
    DEPT_ID CHAR(3) NOT NULL COMMENT '학과 ID (Foreign Key)',
    EMAIL VARCHAR(100) COMMENT '이메일',
    PHONE VARCHAR(15) COMMENT '전화번호',
    SCHOLARSHIP_ID INT COMMENT '장학금 ID (Foreign Key)',
    FOREIGN KEY (DEPT_ID) REFERENCES DEPARTMENT(DEPT_ID) ON DELETE CASCADE,
    FOREIGN KEY (SCHOLARSHIP_ID) REFERENCES SCHOLARSHIP(SCHOLARSHIP_ID) ON DELETE SET NULL
) COMMENT '학생 정보 테이블';

-- 교수 (Professor)
-- 교수 ID, 이름, 학과 ID, 이메일, 전화번호 포함
CREATE TABLE PROFESSOR (
    PROF_ID CHAR(5) PRIMARY KEY COMMENT '교수 ID (Primary Key)',
    PROF_NAME VARCHAR(50) NOT NULL COMMENT '교수 이름',
    DEPT_ID CHAR(3) NOT NULL COMMENT '학과 ID (Foreign Key)',
    EMAIL VARCHAR(100) COMMENT '이메일',
    PHONE VARCHAR(15) COMMENT '전화번호',
    FOREIGN KEY (DEPT_ID) REFERENCES DEPARTMENT(DEPT_ID) ON DELETE CASCADE
) COMMENT '교수 정보 테이블';

-- 강의 (Course)
-- 강의 ID, 강의명, 학점, 학과 ID, 교수 ID, 강의개설학기
CREATE TABLE COURSE (
    COURSE_ID CHAR(6) PRIMARY KEY COMMENT '강의 ID (Primary Key)',
    COURSE_NAME VARCHAR(100) NOT NULL COMMENT '강의명',
    CREDITS INT COMMENT '학점',
    DEPT_ID CHAR(3) NOT NULL COMMENT '학과 ID (Foreign Key)',
    PROF_ID CHAR(5) COMMENT '교수 ID (Foreign Key)',
    SEMESTER CHAR(6) NOT NULL COMMENT '개설 학기 (예: 202401)',
    FOREIGN KEY (DEPT_ID) REFERENCES DEPARTMENT(DEPT_ID) ON DELETE CASCADE,
    FOREIGN KEY (PROF_ID) REFERENCES PROFESSOR(PROF_ID) ON DELETE SET NULL,
    CONSTRAINT credits CHECK (credits > 0)
) COMMENT='강의 정보 테이블';

-- 수강 신청 (Enrollment)
-- 수강신청 ID, 학생 ID, 강의 ID, 수강학기, 수강신청 날짜 포함
CREATE TABLE ENROLLMENT (
    ENROLL_ID INT AUTO_INCREMENT PRIMARY KEY COMMENT '수강 신청 ID (Primary Key)',
    STUDENT_ID CHAR(8) NOT NULL COMMENT '학생 ID (Foreign Key)',
    COURSE_ID CHAR(6) NOT NULL COMMENT '강의 ID (Foreign Key)',
    SEMESTER CHAR(6) NOT NULL COMMENT '수강 학기',
    ENROLL_DATE DATE DEFAULT CURRENT_DATE COMMENT '수강 신청 날짜',
    FOREIGN KEY (STUDENT_ID) REFERENCES STUDENT(STUDENT_ID) ON DELETE CASCADE,
    FOREIGN KEY (COURSE_ID) REFERENCES COURSE(COURSE_ID) ON DELETE CASCADE
) COMMENT '수강 신청 정보 테이블';

-- 성적 (Grade)
-- 성적 ID, 학생 ID, 강의 ID, 중간고사, 기말고사, 최종학점 포함
CREATE TABLE GRADE (
    GRADE_ID INT AUTO_INCREMENT PRIMARY KEY COMMENT '성적 ID (Primary Key)',
    STUDENT_ID CHAR(8) NOT NULL COMMENT '학생 ID (Foreign Key)',
    COURSE_ID CHAR(6) NOT NULL COMMENT '강의 ID (Foreign Key)',
    MID_TERM DECIMAL(5,2) COMMENT '중간고사 점수',
    FINAL_TERM DECIMAL(5,2) COMMENT '기말고사 점수',
    TOTAL_SCORE DECIMAL(5,2) GENERATED ALWAYS AS ((MID_TERM * 0.4) + (FINAL_TERM * 0.6)) STORED COMMENT '총 점수',
    GRADE CHAR(2) AS (
        CASE 
            WHEN TOTAL_SCORE >= 90 THEN 'A+'
            WHEN TOTAL_SCORE >= 80 THEN 'A'
            WHEN TOTAL_SCORE >= 70 THEN 'B'
            WHEN TOTAL_SCORE >= 60 THEN 'C'
            ELSE 'F'
        END
    ) STORED COMMENT '최종 학점',
    FOREIGN KEY (STUDENT_ID) REFERENCES STUDENT(STUDENT_ID) ON DELETE CASCADE,
    FOREIGN KEY (COURSE_ID) REFERENCES COURSE(COURSE_ID) ON DELETE CASCADE,
    CONSTRAINT MID_TERM CHECK (MID_TERM >= 0 AND MID_TERM <= 100),
    CONSTRAINT FINAL_TERM CHECK (FINAL_TERM >= 0 AND FINAL_TERM <= 100)
) COMMENT '성적 관리 테이블';

-- 출석 (Attendance)
-- 출석 ID, 학생 ID, 강의 ID, 출석일자, 출석상태 포함
CREATE TABLE ATTENDANCE (
    ATTEND_ID INT AUTO_INCREMENT PRIMARY KEY COMMENT '출석 ID (Primary Key)',
    STUDENT_ID CHAR(8) NOT NULL COMMENT '학생 ID (Foreign Key)',
    COURSE_ID CHAR(6) NOT NULL COMMENT '강의 ID (Foreign Key)',
    ATTEND_DATE DATE NOT NULL COMMENT '출석 일자',
    STATUS VARCHAR(10) NOT NULL COMMENT '출석 상태',
    FOREIGN KEY (STUDENT_ID) REFERENCES STUDENT(STUDENT_ID) ON DELETE CASCADE,
    FOREIGN KEY (COURSE_ID) REFERENCES COURSE(COURSE_ID) ON DELETE CASCADE,
    CONSTRAINT STATUS CHECK (STATUS IN ('Present', 'Absent', 'Late'))
) COMMENT '출석 관리 테이블';

-- 시험 (Exam)
-- 시험 ID, 강의 ID, 시험날짜, 시험 유형 포함
CREATE TABLE EXAM (
    EXAM_ID INT AUTO_INCREMENT PRIMARY KEY COMMENT '시험 ID (Primary Key)',
    COURSE_ID CHAR(6) NOT NULL COMMENT '강의 ID (Foreign Key)',
    EXAM_DATE DATE NOT NULL COMMENT '시험 날짜',
    EXAM_TYPE VARCHAR(10) NOT NULL COMMENT '시험 유형',
    FOREIGN KEY (COURSE_ID) REFERENCES COURSE(COURSE_ID) ON DELETE CASCADE,
    CONSTRAINT EXAM_TYPE CHECK (EXAM_TYPE IN ('Midterm', 'Final'))
) COMMENT '시험 정보 테이블';
